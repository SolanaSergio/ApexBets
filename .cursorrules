# ApexBets Cursor Rules

## Environment Variables - NEVER USE PLACEHOLDERS
- NEVER use placeholder values like "your_api_key", "placeholder", "example"
- NEVER access .env files directly - user has them configured
- ALWAYS use real environment variables from process.env
- ALWAYS validate environment variables before use
- If environment variable is missing, throw error - never use fallbacks
- ALWAYS use `node -e "require('dotenv').config(); console.log(process.env)"` to check env vars
- ALWAYS use `node -e "require('dotenv').config(); console.log('API Keys:', Object.keys(process.env).filter(k => k.includes('API') || k.includes('KEY')).map(k => k + ':' + (process.env[k] ? 'SET' : 'NOT SET')))"` to check API keys

## Data Handling - NO MOCK DATA
- NEVER use mock data, sample data, or placeholder data
- ALWAYS use real data from APIs or database
- ALWAYS validate data before using it
- If no real data available, return empty array/object, not mock data
- NEVER use hardcoded team names, player names, or league names
- NEVER use hardcoded team mappings or color schemes
- ALWAYS fetch team/player data dynamically from database or APIs

## API Usage Rules
- ALWAYS respect rate limits from environment configuration
- ALWAYS handle API errors gracefully
- ALWAYS use proper error handling for failed API calls
- NEVER hardcode API endpoints - use configuration

## Code Quality Rules
- ALWAYS use TypeScript strict mode
- ALWAYS validate inputs and outputs
- ALWAYS handle errors properly
- NEVER leave TODO comments in production code
- ALWAYS use proper error messages

## Security Rules
- NEVER log sensitive data (API keys, passwords)
- ALWAYS validate user inputs
- ALWAYS use proper authentication checks
- NEVER expose internal implementation details

## File Creation Rules
- NEVER create documentation files unless explicitly requested
- ALWAYS prefer editing existing files over creating new ones
- ALWAYS use proper file naming conventions
- NEVER create placeholder files
- ALWAYS review existing codebase before creating new files
- ALWAYS check for existing similar functionality before implementing

## Database Rules
- ALWAYS use proper Supabase client for database operations
- ALWAYS use proper SQL validation
- ALWAYS handle database errors
- ALWAYS use transactions for multi-step operations
- NEVER use raw SQL without validation
- ALWAYS use proper Supabase client patterns for database operations

## Testing Rules
- ALWAYS test with real data
- NEVER use mock data in tests
- ALWAYS validate test results
- ALWAYS clean up test data

## CRITICAL: NO HARDCODED SPORT-SPECIFIC LOGIC
- NEVER hardcode sport names like 'basketball', 'football', 'soccer', etc.
- NEVER add sport-specific conditions or logic
- ALWAYS use the sport parameter passed to functions
- ALWAYS make code generic and sport-agnostic
- If you need sport-specific behavior, use the sport parameter to determine it
- NEVER assume a specific sport in any service or utility function
- NEVER hardcode team names, player names, or league names
- NEVER hardcode sport-specific configurations in static objects
- ALWAYS load sport configurations dynamically from database or environment
- NEVER use hardcoded mappings for team names, colors, or IDs
- ALWAYS make all services, utilities, and components sport-agnostic

## Supabase Integration Rules
- ALWAYS use proper Supabase client patterns for database operations
- ALWAYS use environment variables for Supabase configuration
- ALWAYS handle Supabase errors gracefully
- ALWAYS use proper authentication patterns
- ALWAYS validate data before database operations
- NEVER expose sensitive Supabase credentials