#!/usr/bin/env node

/**
 * Generate Comprehensive Verification Report
 * Creates detailed report of ApexBets system status
 */

const VerificationTracker = require('./verification-tracker');
const fs = require('fs');
const path = require('path');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function generateMarkdownReport(tracker) {
  const status = tracker.getStatus();
  const working = tracker.getWorkingTests();
  const broken = tracker.getBrokenTests();
  const unknown = tracker.getUnknownTests();
  
  const report = `# ApexBets Verification Report

Generated: ${new Date().toLocaleString()}

## Executive Summary

- **Total Tests**: ${working.length + broken.length + unknown.length}
- **Working**: ${working.length} ✅
- **Broken**: ${broken.length} ❌
- **Unknown**: ${unknown.length} ❓

## System Status by Category

${Object.entries(status.categories).map(([categoryName, category]) => {
  const statusIcon = category.status === 'working' ? '✅' : 
                    category.status === 'partial' ? '⚠️' : 
                    category.status === 'broken' ? '❌' : '❓';
  
  return `### ${category.name} ${statusIcon}

**Status**: ${category.status.toUpperCase()}
**Last Tested**: ${category.lastTested ? new Date(category.lastTested).toLocaleString() : 'Never'}

#### Test Results:
${Object.entries(category.tests).map(([testName, test]) => {
  const testIcon = test.status === 'working' ? '✅' : 
                  test.status === 'broken' ? '❌' : '❓';
  const lastTested = test.lastTested ? new Date(test.lastTested).toLocaleString() : 'Never';
  
  return `- ${testIcon} **${testName}** (${lastTested})${test.notes ? ` - ${test.notes}` : ''}`;
}).join('\n')}
`;
}).join('\n')}

## Working Components

${working.length > 0 ? working.map(test => `- ✅ **${test.category}.${test.test}** (${test.lastTested})`).join('\n') : 'No working components found'}

## Broken Components

${broken.length > 0 ? broken.map(test => `- ❌ **${test.category}.${test.test}** (${test.lastTested}) - ${test.notes}`).join('\n') : 'No broken components found'}

## Unknown Components

${unknown.length > 0 ? unknown.map(test => `- ❓ **${test.category}.${test.test}**`).join('\n') : 'No unknown components found'}

## Issues Found

${status.issues.length > 0 ? status.issues.map(issue => `- **${issue.category}** (${issue.severity}): ${issue.description}`).join('\n') : 'No issues found'}

## Recommendations

${status.recommendations.length > 0 ? status.recommendations.map(rec => `- **${rec.category}**: ${rec.description}`).join('\n') : 'No recommendations'}

## Next Steps

1. **Immediate Actions**:
   ${broken.length > 0 ? '- Fix broken components listed above' : '- No immediate actions required'}
   ${unknown.length > 0 ? '- Test unknown components to determine status' : ''}

2. **Monitoring**:
   - Run verification tests regularly
   - Monitor API rate limits and quotas
   - Check database performance and data integrity

3. **Improvements**:
   ${status.recommendations.length > 0 ? status.recommendations.map(rec => `- ${rec.description}`).join('\n   ') : '- No specific improvements recommended'}

---
*Report generated by ApexBets Verification System*
`;

  return report;
}

function generateJsonReport(tracker) {
  const status = tracker.getStatus();
  const working = tracker.getWorkingTests();
  const broken = tracker.getBrokenTests();
  const unknown = tracker.getUnknownTests();
  
  return {
    metadata: {
      generated: new Date().toISOString(),
      version: '1.0.0',
      system: 'ApexBets Verification Report'
    },
    summary: {
      total: working.length + broken.length + unknown.length,
      working: working.length,
      broken: broken.length,
      unknown: unknown.length,
      healthScore: Math.round((working.length / (working.length + broken.length + unknown.length)) * 100)
    },
    categories: status.categories,
    working,
    broken,
    unknown,
    issues: status.issues,
    recommendations: status.recommendations,
    generatedBy: 'ApexBets Verification System'
  };
}

function main() {
  log(`${colors.bright}${colors.cyan}📊 ApexBets Verification Report Generator${colors.reset}`);
  log(`${colors.cyan}==============================================${colors.reset}\n`);
  
  const tracker = new VerificationTracker();
  
  // Generate reports
  const markdownReport = generateMarkdownReport(tracker);
  const jsonReport = generateJsonReport(tracker);
  
  // Save reports
  const reportsDir = path.join(__dirname, 'reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  const timestamp = new Date().toISOString().split('T')[0];
  const markdownFile = path.join(reportsDir, `verification-report-${timestamp}.md`);
  const jsonFile = path.join(reportsDir, `verification-report-${timestamp}.json`);
  
  fs.writeFileSync(markdownFile, markdownReport);
  fs.writeFileSync(jsonFile, JSON.stringify(jsonReport, null, 2));
  
  log(`${colors.green}✓ Markdown report saved to: ${markdownFile}${colors.reset}`);
  log(`${colors.green}✓ JSON report saved to: ${jsonFile}${colors.reset}`);
  
  // Print summary
  const working = tracker.getWorkingTests();
  const broken = tracker.getBrokenTests();
  const unknown = tracker.getUnknownTests();
  
  log(`\n${colors.bright}Report Summary:${colors.reset}`);
  log(`${colors.green}✓ Working: ${working.length}${colors.reset}`);
  log(`${colors.red}✗ Broken: ${broken.length}${colors.reset}`);
  log(`${colors.blue}? Unknown: ${unknown.length}${colors.reset}`);
  
  const healthScore = Math.round((working.length / (working.length + broken.length + unknown.length)) * 100);
  const healthColor = healthScore >= 80 ? 'green' : healthScore >= 60 ? 'yellow' : 'red';
  log(`${colors[healthColor]}📈 Health Score: ${healthScore}%${colors.reset}`);
  
  if (broken.length > 0) {
    log(`\n${colors.red}🚨 Critical Issues Found:${colors.reset}`);
    broken.forEach(test => {
      log(`${colors.red}  • ${test.category}.${test.test}: ${test.notes}${colors.reset}`);
    });
  }
  
  if (unknown.length > 0) {
    log(`\n${colors.yellow}⚠️  Unknown Components:${colors.reset}`);
    unknown.forEach(test => {
      log(`${colors.yellow}  • ${test.category}.${test.test}${colors.reset}`);
    });
  }
  
  log(`\n${colors.bright}Reports generated successfully!${colors.reset}`);
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { generateMarkdownReport, generateJsonReport };
